Lets get started
================

Preparation
-----------

Within our projects direcrory we create a virtual environment.
I like better virtualenv and not pipenv.

So:

.. code-block:: console
    :emphasize-lines: 1, 6,9,12,15,17

    $ pip install virtualenv
    $ virtualenv venv 
    $ .\venv\scripts\activate
    (venv) C:\MyDjangoRestfullReactApps\TwitterLikeApp2> 

    Freeze all the packages i have installed and keep them in requirements.ixi file
    $ pip freeze > requirements.txt

    Install the same packages to a new packages
    $ pip install -r requirements.txt

    OR alternatively
    $ python3.6 -m pip install pipenv --upgrade
    $ pipenv shell
    to deactivate it just:
    $ exit
    In order to install all dependencies of the virtual environment:
    $ pipenv run
    OR
    $ pipenv install requests 

In order to activate pipenv virtual environment we run:
pipenv shell



OR alternatively (outside the pipenv),
pipenv --three sync

After that Sphinx Installation

.. code-block:: console
    :emphasize-lines: 1

    $ pip install sphinx
    $ mkdir docs
    $ cd docs
    $ sphinx-quickstart
    (install sphinx_rtd_theme)
    $ pip install sphinx_rtd_theme
    (install sphinxcontrib-httpdomain)
    $ pip install sphinxcontrib-httpdomain
    (install sphinx-copybutton)
    $ pip install sphinx-copybutton

Install Django 3.2.13 LTS version 

.. code-block:: console
    :emphasize-lines: 1

    $ cd ..
    $ pip install Django==3.2.13
    Successfully installed Django-3.2.13 asgiref-3.5.0 sqlparse-0.4.2

    $ python -m django --version
    3.2.13

Create the django project

.. code-block:: console
    :emphasize-lines: 1

    $ django-admin startproject tweetmetoo .

Initialize Git by openning windows cmd prompt OR GIT cmd (or i imagine GIT shell would do the job)
Or a VS code rerminal.

.. code-block:: console
    :emphasize-lines: 1

    In my projects folder
    $ git init 
    Initialized empty Git repository in C:/MyDjangoRestfullReactApps/TwitterLikeApp2/.git/
    $ git remote add origin https://github.com/Otinanai1309/tweetmetoo.git
    $ git add --all
    $ git commit -m "Initial Commit"

    

Open the projects folder with Visual Studio


0:32:31 8. The Tweets Model
---------------------------

.. code-block:: console
    :emphasize-lines: 1

    $ .\manage.py startapp tweets

0:39:35 9. Store Data from Django Model
---------------------------------------

You Tube video uploaded at: https://www.youtube.com/watch?v=f1R_bykXHGE&t=1653s

.. code-block:: python
    :emphasize-lines: 1

    # tweets/models.py
    from django.db import models

    # Create your models here.
    class Tweet(models.Model):
        content = models.TextField(blank=True, null=True)
        image = models.FileField(upload_to='images/', blank=True, null=True)

.. code-block:: python
    :emphasize-lines: 1,15,42

    # tweetmetoo/settings.py
    """
    Django settings for tweetmetoo project.

    Generated by 'django-admin startproject' using Django 3.2.13.

    For more information on this file, see
    https://docs.djangoproject.com/en/3.2/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/3.2/ref/settings/
    """

    from pathlib import Path
    import os

    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent


    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'django-insecure-%uo5vr70p_+x9@+g_+%qekm6qjm-zsuqpz8y@jlgf%4bg(8)2)'

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True

    ALLOWED_HOSTS = []


    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'tweets',
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'tweetmetoo.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'tweetmetoo.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/3.2/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


    # Password validation
    # https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/3.2/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/3.2/howto/static-files/

    STATIC_URL = '/static/'

    # Default primary key field type
    # https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


**and Of-course run the migration commands**

.. code-block:: console
    :emphasize-lines: 1

    $ python manage.py makemigrations
    Migrations for 'tweets':
        tweets\migrations\0001_initial.py
            - Create model Tweet
    $ python manage.py migrate
    Operations to perform:
        Apply all migrations: admin, auth, contenttypes, sessions, tweets
    Running migrations:
        Applying contenttypes.0001_initial... OK
        Applying auth.0001_initial... OK
        Applying admin.0001_initial... OK
        Applying admin.0002_logentry_remove_auto_add... OK
        Applying admin.0003_logentry_add_action_flag_choices... OK
        Applying contenttypes.0002_remove_content_type_name... OK
        Applying auth.0002_alter_permission_name_max_length... OK
        Applying auth.0003_alter_user_email_max_length... OK
        Applying auth.0004_alter_user_username_opts... OK
        Applying auth.0005_alter_user_last_login_null... OK
        Applying auth.0006_require_contenttypes_0002... OK
        Applying auth.0007_alter_validators_add_error_messages... OK
        Applying auth.0008_alter_user_username_max_length... OK
        Applying auth.0009_alter_user_last_name_max_length... OK
        Applying auth.0010_alter_group_name_max_length... OK
        Applying auth.0011_update_proxy_permissions... OK
        Applying auth.0012_alter_user_first_name_max_length... OK
        Applying sessions.0001_initial... OK
        Applying tweets.0001_initial... OK




.. code-block:: shell
    :emphasize-lines: 1

    $ .\manage.py shell
    >>> from tweets.models import Tweet
    >>> obj = Tweet()
    >>> obj.content = "Hello world!"
    >>> obj.save()

.. code-block:: shell
    :emphasize-lines: 1

    $ .\manage.py shell
    >>> from tweets.models import Tweet
    >>> obj = Tweet.objects.get(id=1)
    >>> obj.content
    'Hello world!'




0:43:10 10. Intro to URL Routing and Dynamic Routing
----------------------------------------------------

In order to create our first url we start from creating the view. We can create class view 
or function view.
After that i can go to the urls.py in my main root and add the url to my view. Of-course 
i have to build a nice html page for my url.

0:47:57 11. Handling Dynamic Routing
------------------------------------

There are the changes within the git repository

0:51:32 12. Dynamic View into REST API Endpoint
-----------------------------------------------

We will change the dynamic view to Rest API view. We will return json data.

The only file we made some changes was views.py

.. code-block:: python
    :emphasize-lines: 1,26,27,28,29,30,31,32,33,34,35,36,37,38

    # tweets/views.py
    from django.http import HttpResponse, Http404, JsonResponse
    from django.shortcuts import render

    from .models import Tweet   # Relative import 

    # Create your views here.

    def home_view(request, *args, **kwargs):
        return HttpResponse("<h1>Hello World!!!</h1>")

    def home_detail_view(request, tweet_id, *args, **kwargs):
        """
        REST API VIEW
        return json data
        Consume by JavaScript or Swift or Java or iOS/Android
        :param request: _description_
        :type request: _type_
        :param tweet_id: _description_
        :type tweet_id: _type_
        :raises Http404: _description_
        :return: _description_
        :rtype: _type_
        """
        
        data = {
            "id": tweet_id,
        }
        status = 200
        try:
            obj = Tweet.objects.get(id=tweet_id)
            data['content'] = obj.content
        except:
            data['message'] = "Not found"
            status = 404
        
        
        return JsonResponse(data, status=status)


0:55:50 13. Our First Template
------------------------------


1:00:07 14. Bootstrap & Django Templates
----------------------------------------


Σταμάτησα στο 49:53