Lets get started
================

Preparation
-----------

Within our projects direcrory we create a virtual environment.
I like better virtualenv and not pipenv.

So:

.. code-block:: console
    :emphasize-lines: 1, 6,9,12,15,17

    $ pip install virtualenv
    $ virtualenv venv 
    $ .\venv\scripts\activate
    (venv) C:\MyDjangoRestfullReactApps\TwitterLikeApp2> 

    Freeze all the packages i have installed and keep them in requirements.ixi file
    $ pip freeze > requirements.txt

    Install the same packages to a new packages
    $ pip install -r requirements.txt

    OR alternatively
    $ python3.6 -m pip install pipenv --upgrade
    $ pipenv shell
    to deactivate it just:
    $ exit
    In order to install all dependencies of the virtual environment:
    $ pipenv run
    OR
    $ pipenv install requests 

In order to activate pipenv virtual environment we run:
pipenv shell



OR alternatively (outside the pipenv),
pipenv --three sync

After that Sphinx Installation

.. code-block:: console
    :emphasize-lines: 1

    $ pip install sphinx
    $ mkdir docs
    $ cd docs
    $ sphinx-quickstart
    (install sphinx_rtd_theme)
    $ pip install sphinx_rtd_theme
    (install sphinxcontrib-httpdomain)
    $ pip install sphinxcontrib-httpdomain
    (install sphinx-copybutton)
    $ pip install sphinx-copybutton
    (Install sphinx-toolbox. More infos on https://sphinx-toolbox.readthedocs.io/en/latest/)
    $ pip install sphinx-toolbox

Install Django 3.2.13 LTS version 

.. code-block:: console
    :emphasize-lines: 1

    $ cd ..
    $ pip install Django==3.2.13
    Successfully installed Django-3.2.13 asgiref-3.5.0 sqlparse-0.4.2

    $ python -m django --version
    3.2.13

Create the django project

.. code-block:: console
    :emphasize-lines: 1

    $ django-admin startproject tweetmetoo .

Initialize Git by openning windows cmd prompt OR GIT cmd (or i imagine GIT shell would do the job)
Or a VS code rerminal.

.. code-block:: console
    :emphasize-lines: 1

    In my projects folder
    $ git init 
    Initialized empty Git repository in C:/MyDjangoRestfullReactApps/TwitterLikeApp2/.git/
    $ git remote add origin https://github.com/Otinanai1309/tweetmetoo.git
    $ git add --all
    $ git commit -m "Initial Commit"

    

Open the projects folder with Visual Studio


0:32:31 8. The Tweets Model
---------------------------

.. code-block:: console
    :emphasize-lines: 1

    $ .\manage.py startapp tweets

0:39:35 9. Store Data from Django Model
---------------------------------------

You Tube video uploaded at: https://www.youtube.com/watch?v=f1R_bykXHGE&t=1653s

.. code-block:: python
    :emphasize-lines: 1

    # tweets/models.py
    from django.db import models

    # Create your models here.
    class Tweet(models.Model):
        content = models.TextField(blank=True, null=True)
        image = models.FileField(upload_to='images/', blank=True, null=True)

.. code-block:: python
    :emphasize-lines: 1,15,42

    # tweetmetoo/settings.py
    """
    Django settings for tweetmetoo project.

    Generated by 'django-admin startproject' using Django 3.2.13.

    For more information on this file, see
    https://docs.djangoproject.com/en/3.2/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/3.2/ref/settings/
    """

    from pathlib import Path
    import os

    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent


    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'django-insecure-%uo5vr70p_+x9@+g_+%qekm6qjm-zsuqpz8y@jlgf%4bg(8)2)'

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True

    ALLOWED_HOSTS = []


    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'tweets',
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'tweetmetoo.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'tweetmetoo.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/3.2/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


    # Password validation
    # https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/3.2/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/3.2/howto/static-files/

    STATIC_URL = '/static/'

    # Default primary key field type
    # https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


**and Of-course run the migration commands**

.. code-block:: console
    :emphasize-lines: 1

    $ python manage.py makemigrations
    Migrations for 'tweets':
        tweets\migrations\0001_initial.py
            - Create model Tweet
    $ python manage.py migrate
    Operations to perform:
        Apply all migrations: admin, auth, contenttypes, sessions, tweets
    Running migrations:
        Applying contenttypes.0001_initial... OK
        Applying auth.0001_initial... OK
        Applying admin.0001_initial... OK
        Applying admin.0002_logentry_remove_auto_add... OK
        Applying admin.0003_logentry_add_action_flag_choices... OK
        Applying contenttypes.0002_remove_content_type_name... OK
        Applying auth.0002_alter_permission_name_max_length... OK
        Applying auth.0003_alter_user_email_max_length... OK
        Applying auth.0004_alter_user_username_opts... OK
        Applying auth.0005_alter_user_last_login_null... OK
        Applying auth.0006_require_contenttypes_0002... OK
        Applying auth.0007_alter_validators_add_error_messages... OK
        Applying auth.0008_alter_user_username_max_length... OK
        Applying auth.0009_alter_user_last_name_max_length... OK
        Applying auth.0010_alter_group_name_max_length... OK
        Applying auth.0011_update_proxy_permissions... OK
        Applying auth.0012_alter_user_first_name_max_length... OK
        Applying sessions.0001_initial... OK
        Applying tweets.0001_initial... OK




0:39:35 9. Store Data from Django Model
---------------------------------------

So if i wanna test those files i can do:


.. code-block:: shell
    :emphasize-lines: 1

    $ .\manage.py shell
    Python 3.8.7 (tags/v3.8.7:6503f05, Dec 21 2020, 17:59:51) [MSC v.1928 64 bit (AMD64)] on win32
    Type "help", "copyright", "credits" or "license" for more information.
    (InteractiveConsole)
    >>> from tweets.models import Tweet
    >>> obj = Tweet()
    >>> obj.content = "Hello world!"
    >>> obj.save()


.. code-block:: shell
    :emphasize-lines: 1

    $ .\manage.py shell
    >>> from tweets.models import Tweet
    >>> obj = Tweet.objects.get(id=1)
    >>> obj.content
    'Hello world!'

0:43:10 10. Intro to URL Routing and Dynamic Routing
----------------------------------------------------

In order to create our first url we start from creating the view. We can create class view 
or function view.
After that i can go to the urls.py in my main root and add the url to my view. Of-course 
i have to build a nice html page for my url.

.. code-block:: python
    :emphasize-lines: 1,2,6

    # tweets/views.py
    from django.http import HttpResponse
    from django.shortcuts import render
    from requests import request

    from tweets.models import Tweet

    # Create your views here.
    def home_view(request, *args, **kwargs):
        return HttpResponse("<h1>Hello world!!!</h1>")

    def tweet_detail_view(request, pk):
        obj = Tweet.objects.get(pk=pk)
        return HttpResponse(obj.content) 

    def dynamic_routing(request, name, *args, **kwargs):
        return HttpResponse(f"<h1> Hello {name}. Have a nice day")       



.. code-block:: python
    :emphasize-lines: 1,19,23,24,25

    # tweetmetoo/urls.py
    """tweetmetoo URL Configuration

    The `urlpatterns` list routes URLs to views. For more information please see:
        https://docs.djangoproject.com/en/3.2/topics/http/urls/
    Examples:
    Function views
        1. Add an import:  from my_app import views
        2. Add a URL to urlpatterns:  path('', views.home, name='home')
    Class-based views
        1. Add an import:  from other_app.views import Home
        2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
    Including another URLconf
        1. Import the include() function: from django.urls import include, path
        2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
    """
    from django.contrib import admin
    from django.urls import path
    from tweets import views

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('', views.home_view, name = 'home-view'),
        path('tweets_detail/<int:pk>', views.tweet_detail_view, name="tweet-detail-view"),
        path('dynamic_routing/<str:name>', views.dynamic_routing, name="dynamic-routing"),
    ]


We Run the server and we have our page up and running.

.. code-block:: console
    :emphasize-lines: 1

    $ python manage.py runserver
    Watching for file changes with StatReloader
    Performing system checks...

    System check identified no issues (0 silenced).
    April 30, 2022 - 18:37:41
    Django version 3.2.13, using settings 'tweetmetoo.settings'
    Starting development server at http://127.0.0.1:8000/
    Quit the server with CTRL-BREAK.
    [30/Apr/2022 18:37:44] "GET / HTTP/1.1" 200 23
    Not Found: /favicon.ico
    [30/Apr/2022 18:37:44] "GET /favicon.ico HTTP/1.1" 404 2232



0:51:32 12. Dynamic View into REST API Endpoint
-----------------------------------------------

We will change the dynamic view to Rest API view. We will return json data.

The only file we made some changes was views.py

.. code-block:: python
    :emphasize-lines: 1

    # tweets/views.py
    from django.http import HttpResponse, Http404, JsonResponse
    from django.shortcuts import render

    from .models import Tweet   # Relative import 

    # Create your views here.

    def home_view(request, *args, **kwargs):
        return HttpResponse("<h1>Hello World!!!</h1>")

    def home_detail_view(request, tweet_id, *args, **kwargs):
        """
        REST API VIEW
        return json data
        Consume by JavaScript or Swift or Java or iOS/Android
        """
        
        data = {
            "id": tweet_id,
        }
        status = 200
        try:
            obj = Tweet.objects.get(id=tweet_id)
            data['content'] = obj.content
        except:
            data['message'] = "Not found"
            status = 404
        
        
        return JsonResponse(data, status=status)


0:55:50 13. Our First Template
------------------------------

Now we will introduce the template usage that will allow us to replase the 
one line HttpResponse with an HTML page.
Under Base directory (same dir that manage.py exists) we create a folder named templates.
Include this directory to settings.py

.. collapse:: show settings file

    .. code-block:: python
        :emphasize-lines: 1, 60

        # settings.py
        """
        Django settings for tweetmetoo project.

        Generated by 'django-admin startproject' using Django 3.2.13.

        For more information on this file, see
        https://docs.djangoproject.com/en/3.2/topics/settings/

        For the full list of settings and their values, see
        https://docs.djangoproject.com/en/3.2/ref/settings/
        """

        from pathlib import Path
        import os

        # Build paths inside the project like this: BASE_DIR / 'subdir'.
        BASE_DIR = Path(__file__).resolve().parent.parent


        # Quick-start development settings - unsuitable for production
        # See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

        # SECURITY WARNING: keep the secret key used in production secret!
        SECRET_KEY = 'django-insecure-%uo5vr70p_+x9@+g_+%qekm6qjm-zsuqpz8y@jlgf%4bg(8)2)'

        # SECURITY WARNING: don't run with debug turned on in production!
        DEBUG = True

        ALLOWED_HOSTS = []


        # Application definition

        INSTALLED_APPS = [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'tweets',
        ]

        MIDDLEWARE = [
            'django.middleware.security.SecurityMiddleware',
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
        ]

        ROOT_URLCONF = 'tweetmetoo.urls'

        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [os.path.join(BASE_DIR, 'templates')],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ]

        WSGI_APPLICATION = 'tweetmetoo.wsgi.application'


        # Database
        # https://docs.djangoproject.com/en/3.2/ref/settings/#databases

        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }


        # Password validation
        # https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

        AUTH_PASSWORD_VALIDATORS = [
            {
                'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
            },
        ]


        # Internationalization
        # https://docs.djangoproject.com/en/3.2/topics/i18n/

        LANGUAGE_CODE = 'en-us'

        TIME_ZONE = 'UTC'

        USE_I18N = True

        USE_L10N = True

        USE_TZ = True


        # Static files (CSS, JavaScript, Images)
        # https://docs.djangoproject.com/en/3.2/howto/static-files/

        STATIC_URL = '/static/'

        # Default primary key field type
        # https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

        DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

Under templates folder we create 2 more named tweets and pages and under pages we 
create a home.html page. The way to use this new page is:

.. code-block:: python
    :emphasize-lines: 1, 10

    # tweets/views.py
    from django.http import Http404, HttpResponse, JsonResponse
    from django.shortcuts import render
    from requests import request

    from tweets.models import Tweet # or simpler from .models import Tweet (same directory)

    # Create your views here.
    def home_view(request, *args, **kwargs):
        return render(request, "pages/home.html", context={}, status=200)

    def tweet_detail_view(request, pk):
        """
        REST API VIEW
        return json data
        Consume by JavaScript or Swift or Java or iOS/Android
        """
        data ={
            "pk": pk,
            # "image_path": obj.image.url
        } 
        status = 200
        
        try:
            obj = Tweet.objects.get(pk=pk)
            data['content'] = obj.content
        except:
            data['message'] = "Not found"
            status = 404
            

        
        return JsonResponse(data, status=status)

    def dynamic_routing(request, name, *args, **kwargs):
        return HttpResponse(f"<h1> Hello {name}. Have a nice day")       




1:00:07 14. Bootstrap & Django Templates
----------------------------------------

Under templates directory we create a base.html file

We take from getbootstrap page the starter template and copy it there

.. code-block:: html
    :emphasize-lines: 1,13,17,19

    <!-- templates/base.html -->
    <!doctype html>
    <html lang="en">
    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Bootstrap CSS -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

    
        {% block head_title %}{% endblock head_title %}

    </head>
    <body>
    {% block content %}
    
    {% endblock content %}

        <!-- Optional JavaScript; choose one of the two! -->

        <!-- Option 1: Bootstrap Bundle with Popper -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>

        <!-- Option 2: Separate Popper and Bootstrap JS -->
        <!--
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js" integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js" integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"></script>
        -->
    </body>
    </html>


.. code-block:: HTML
    :caption: the home page :file: 'pages/home.html'
    :emphasize-lines: 1 

    <!-- pages/home.html -->
    {% extends 'base.html' %}


    {% block head_title %}
    Tweet me too
    {% endblock head_title %}


    {% block content %}
        <h1> welcome to twetmetoo</h1>
    {% endblock content %}


1:04:17 15. Tweet List View
---------------------------

The django template system is good just for reducing html code we have to write.
So we don't have to violate the DRY concept (Don't Repeat Yourself).


.. collapse:: views file with a new function

    .. code-block:: python
        :caption: a new function within tweets.views.py
        :emphasize-lines: 1,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38

        # tweets/views.py
        from django.http import Http404, HttpResponse, JsonResponse
        from django.shortcuts import render
        import pkg_resources
        from requests import request

        from tweets.models import Tweet # or simpler from .models import Tweet (same directory)

        # Create your views here.
        def home_view(request, *args, **kwargs):
            return render(request, "pages/home.html", context={}, status=200)

        def tweet_list_view(request, *args, **kwargs):
            """
            REST API VIEW
            return json data
            Consume by JavaScript or Swift or Java or iOS/Android
            """
            qs = Tweet.objects.all()
            # My approach witch by the way i think is simpler    
            for tweet in qs:
                data = {
                    'id': tweet.id,
                    'content': tweet.content,
                }
            # Or another way to tacle this:
            tweets_list = []
            # with 1 or many lines 
            # tweet_list = [{"id": x.id, "content": x.content} for x in qs]
            for tweet in qs:
                tweets_list.append({
                    'id': tweet.id,
                    'content': tweet.content,
                })
            data = {
                "response": tweets_list
            }
            return JsonResponse(data, status=200)

        def tweet_detail_view(request, pk):
            """
            REST API VIEW
            return json data
            Consume by JavaScript or Swift or Java or iOS/Android
            """
            data ={
                "pk": pk,
                # "image_path": obj.image.url
            } 
            status = 200
            
            try:
                obj = Tweet.objects.get(pk=pk)
                data['content'] = obj.content
            except:
                data['message'] = "Not found"
                status = 404
                

            
            return JsonResponse(data, status=status)

        def dynamic_routing(request, name, *args, **kwargs):
            return HttpResponse(f"<h1> Hello {name}. Have a nice day")       



1:08:01 16. Dynamic Load Tweets via JavaScript
----------------------------------------------

Now in order to load to my home page all the data that localhost/tweets endpoint has 
we have to use javascript.

Within home.html i add a script tag to put inside javascript.

.. code-block:: html 
    :captions: home.html page 
    :emphasize-lines: 1

    <!--pages/home.html-->
    {% extends 'base.html' %}


    {% block head_title %}
    <title>Tweet me too</title>
    {% endblock head_title %}


    {% block content %}
        <h1> welcome to twetmetoo</h1>

    <!--Script tag allows me to type javascript inside html-->
    <script>
    const xhr = new XMLHttpRequest() 
    const method = "GET" //"POST"
    const url = "/tweets"
    const responseType = "json"

    // Now i can perform the request 
    xhr.responseType =responseType
    xhr.open(method, url)
    xhr.onload = function() {
        console.log(xhr.response)
        const serverResponse = xhr.response
        var listedItems = serverResponse.response  //response is the key from the data directory
        console.log(listedItems)
    }
    xhr.send() // triggers the request for me
    </script>
    {% endblock content %}


1:18:19 18. Tweets to HTML via JavaScript
-----------------------------------------

.. collapse:: reveal home.html file

    .. code-block:: html
        :emphasize-lines: 1

        <!-- pages/home.html -->
        {% extends 'base.html' %}


        {% block head_title %}
        <title>Tweet me too</title>
        {% endblock head_title %}


        {% block content %}
        <h1> welcome to twetmetoo</h1>

        <div id="tweets">
            Replace me with something
        </div>

        <!--Script tag allows me to type javascript inside html-->
        <script>
        const tweetsElement = document.getElementById('tweets')  // get html elements
        // tweetsElement.innerHTML = `Wait loading tweets....   <br><br>`              // set new html content in that element 



        const xhr = new XMLHttpRequest() 
        const method = "GET" //"POST"
        const url = "/tweets"
        const responseType = "json"

        // Now i can perform the request 
        xhr.responseType =responseType
        xhr.open(method, url)
        xhr.onload = function() {
            console.log(xhr.response)
            const serverResponse = xhr.response
            const listedItems = serverResponse.response  // array (python list), response is the key that contains a list from the data dictionairy
            var finalTweetStr = ""
            var i;
            for (i=0; i<listedItems.length; i++) {
                console.log(i)
                console.log(listedItems[i])
                var currentItem = "<div class='mb-4'><h1>" + listedItems[i].id + "</h1>" + "<p>" + listedItems[i].content + "</p></div>"
                finalTweetStr += currentItem
                
            }
            tweetsElement.innerHTML += finalTweetStr
        }
        xhr.send() // triggers the request for me
        </script>
        {% endblock content %}



1:25:56 19. Format Tweet Method
-------------------------------

.. collapse:: reveal home.html file

    .. code-block:: html
        :emphasize-lines: 1

        <!-- pages/home.html -->
        {% extends 'base.html' %}


        {% block head_title %}
        <title>Tweet me too</title>
        {% endblock head_title %}


        {% block content %}
        <h1> welcome to twetmetoo</h1>

        <div id="tweets">
            Replace me with something
        </div>

        <!--Script tag allows me to type javascript inside html-->
        <script>
        const tweetsElement = document.getElementById('tweets')  // get html elements
        // tweetsElement.innerHTML = `Wait loading tweets....   <br><br>`              // set new html content in that element 



        const xhr = new XMLHttpRequest() 
        const method = "GET" //"POST"
        const url = "/tweets"
        const responseType = "json"

        function formatTweetElement(tweet){
            var formattedTweet = `<div class='mb-4 tweet' id= '"tweet-" + ${tweet.id}'><p>  ${tweet.content}  </p></div>`

            return formattedTweet
        }

        // Now i can perform the request 
        xhr.responseType =responseType
        xhr.open(method, url)
        xhr.onload = function() {
            console.log(xhr.response)
            const serverResponse = xhr.response
            const listedItems = serverResponse.response  // array (python list), response is the key that contains a list from the data dictionairy
            var finalTweetStr = ""
            var i;
            for (i=0; i<listedItems.length; i++) {
                var tweetobj = listedItems[i]   
                var currentItem = formatTweetElement(tweetobj)     
                finalTweetStr += currentItem
                
            }
            tweetsElement.innerHTML += finalTweetStr
        }
        xhr.send() // triggers the request for me
        </script>
        {% endblock content %}



1:29:30 20. Like Button Rendering
---------------------------------


.. collapse:: reveal home.html file

    .. code-block:: html
        :emphasize-lines: 1

        <!-- pages/home.html -->

        {% extends 'base.html' %}

        {% block head_title %}
        <title>Tweet me too</title>
        {% endblock head_title %}


        {% block content %}
        <h1> welcome to tweet me too</h1>

        <div id="tweets">
            Wait loading tweets....
        </div>

        <!--Script tag allows me to type javascript inside html-->
        <script>
        const tweetsElement = document.getElementById('tweets')  
        
        const xhr = new XMLHttpRequest() 
        const method = "GET" 
        const url = "/tweets"
        const responseType = "json"

        function handleDidLike(tweet_id, currentCount) {
            console.log(tweet_id, currentCount)
            
        }

        function likeBtn(tweet) {
            return `
            <button 
                type='button' 
                class='btn btn-primary btn-small' 
                onclick= handleDidLike(${tweet.id}, ${tweet.likes})
            >
            ${tweet.likes} Likes
            </button>
        `
        }

        function formatTweetElement(tweet){
            var formattedTweet = `
            <div 
                class='mb-4 tweet' 
                id= "'tweet-' ${tweet.id}"
            >
                <p>  
                    ${tweet.content} 
                </p>
                <div 
                    class='btn-group'
                > 
                    ${likeBtn(tweet)}
                </div>
            </div>
            `
            return formattedTweet
        }

        xhr.responseType =responseType
        xhr.open(method, url)
        xhr.onload = function() {
            const serverResponse = xhr.response
            const listedItems = serverResponse.response  
            var finalTweetStr = ""
            var i;
            for (i=0; i<listedItems.length; i++) {
                var tweetobj = listedItems[i]   
                var currentItem = formatTweetElement(tweetobj)     
                finalTweetStr += currentItem
                
            }
            tweetsElement.innerHTML += finalTweetStr
        }
        xhr.send() 
        </script>
        {% endblock content %}


1:48:00 22. Tweet Create Form
-----------------------------


.. code-block:: python
    :caption: 'tweets/forms.py'
    :emphasize-lines: 1

    # tweets/forms.py
    from dataclasses import fields
    from pyexpat import model
    from unittest.util import _MAX_LENGTH
    from django import forms

    from .models import Tweet

    MAX_TWEET_LENGTH = 240

    class TweetForm(forms.ModelForm):
        
        # declare actual form
        class Meta:
            model = Tweet
            fields = ['content']
            
        def clean_content(self):
            content = self.cleaned_data.get("content")
            if len(content) > MAX_TWEET_LENGTH:
                raise forms.ValidationError("Thiw tweet is too long")
            return content
    

.. collapse:: reveal views.py file

    .. code-block:: python
        :caption: tweets/views.py
        :emphasize-lines: 1,18,19,20,21,22,23,24,25

        # tweets/views.py
        from django.http import Http404, HttpResponse, JsonResponse
        from django.shortcuts import render
        # import pkg_resources
        from requests import request


        from .forms import TweetForm
        from tweets.models import Tweet # or simpler from .models import Tweet (same directory)

        import random

        # Create your views here.
        def home_view(request, *args, **kwargs):
            return render(request, "pages/home.html", context={}, status=200)


        def tweet_create_view(request, *args, **kwargs):
            form = TweetForm(request.POST or None)
            if form.is_valid():
                obj = form.save(commit=False)
                # do other form related logic
                obj.save()
                form = TweetForm() # reinitialize a new blank form
            return render(request, 'components/form.html', context={"form": form}, status=200)


        def tweet_list_view(request, *args, **kwargs):
            """
            REST API VIEW
            return json data
            Consume by JavaScript or Swift or Java or iOS/Android
            """
            qs = Tweet.objects.all()
            # My approach witch by the way i think is simpler    
            for tweet in qs:
                data = {
                    'id': tweet.id,
                    'content': tweet.content,
                }
            # Or another way to tacle this:
            tweets_list = []
            # with 1 or many lines 
            # tweet_list = [{"id": x.id, "content": x.content} for x in qs]
            for tweet in qs:
                tweets_list.append({
                    'id': tweet.id,
                    'content': tweet.content,
                    'likes': random.randint(0, 1459)
                })
            data = {
                "response": tweets_list
            }
            return JsonResponse(data, status=200)

        def tweet_detail_view(request, pk):
            """
            REST API VIEW
            return json data
            Consume by JavaScript or Swift or Java or iOS/Android
            """
            data ={
                "pk": pk,
                # "image_path": obj.image.url
            } 
            status = 200
            
            try:
                obj = Tweet.objects.get(pk=pk)
                data['content'] = obj.content
            except:
                data['message'] = "Not found"
                status = 404
                

            
            return JsonResponse(data, status=status)

        def dynamic_routing(request, name, *args, **kwargs):
            return HttpResponse(f"<h1> Hello {name}. Have a nice day")       



.. code-block:: html
    :caption: 'templates/components/form.html'
    :emphasize-lines: 1

    <!--templates/components/form.html-->
    <form method='POST'> {% csrf_token %}
        {{ form.as_p }}
        <button type='submit' class='btn btn-secondary'>Save</button>
    </form>


.. code-block:: python
    :caption: 'tweets/urls.py'
    :emphasize-lines: 1,8

    # tweets/urls.py
    from django.contrib import admin
    from django.urls import path
    from tweets import views

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('', views.home_view, name = 'home-view'),
        path('create_tweet/', views.tweet_create_view, name="create-tweet-view"),
        path('tweets/', views.tweet_list_view, name="tweet-list-view"),
        path('tweets_detail/<int:pk>', views.tweet_detail_view, name="tweet-detail-view"),
        path('dynamic_routing/<str:name>', views.dynamic_routing, name="dynamic-routing"),
    ]


2:26:47 29. Serialize Django Model Object
-----------------------------------------

https://github.com/Otinanai1309/tweetmetoo/commit/4255cefa2e6a36885832eaefa432a2ae34a98e95


2:33:33 30. Append New Tweet & Reorder
--------------------------------------

https://github.com/Otinanai1309/tweetmetoo/commit/a61345f4d0961b548f766f880e627c4de95b12b4


2:37:09 31. Handling Form Errors
--------------------------------

https://github.com/Otinanai1309/tweetmetoo/commit/73f7d517921bb70a12bbb17c1514dcc8acc349d0


2:42:18 32. Rendering the Error Message via Vanilla JavaScript
--------------------------------------------------------------

https://github.com/Otinanai1309/tweetmetoo/commit/c5f3187f59f2bcfc4d0477a519b82fcb70fb4b56

2:49:28 33. Users & Tweets
--------------------------

https://github.com/Otinanai1309/tweetmetoo/commit/a6ba0b3ce0ddb7f806d784b3c0e2bd8fba3d34d1


2:57:09 34. Django Admin
------------------------

if i want to make my admin site more rowbust and add a functionality where i can look for tweets by username.

Lets first see how i can do it within shell.

.. code-block:: console
    :emphasize-lines: 1,6,9

    $ python manage.py shell
    >>> from tweets.models import Tweet
    >>> qs = Tweet.objects.filter(id=1)
    >>> qs
    <QuerySet [<Tweet: Tweet object (1)>]>
    >>> qs = Tweet.objects.filter(user__username="christos")   
    >>> qs
    <QuerySet [<Tweet: Tweet object (13)>, <Tweet: Tweet object (12)>, <Tweet: Tweet object (11)>, <Tweet: Tweet object (10)>, <Tweet: Tweet object (9)>, <Tweet: Tweet object (8)>, <Tweet: Tweet object (7)>, <Tweet: Tweet object (6)>, <Tweet: Tweet object (5)>, <Tweet: Tweet object (4)>, <Tweet: Tweet object (3)>, <Tweet: Tweet object (2)>, <Tweet: Tweet object (1)>]>
    >>> qs = Tweet.objects.filter(user=1)
    >>> qs
    <QuerySet [<Tweet: Tweet object (13)>, <Tweet: Tweet object (12)>, <Tweet: Tweet object (11)>, <Tweet: Tweet object (10)>, <Tweet: Tweet object (9)>, <Tweet: Tweet object (8)>, <Tweet: Tweet object (7)>, <Tweet: Tweet object (6)>, <Tweet: Tweet object (5)>, <Tweet: Tweet object (4)>, <Tweet: Tweet object (3)>, <Tweet: Tweet object (2)>, <Tweet: Tweet object (1)>]>


https://github.com/Otinanai1309/tweetmetoo/commit/aa22b3c19a6796f204f1572eee56dc04b0cf84f6


3:07:23 35. Associate Authenticated User to Object
--------------------------------------------------


https://github.com/Otinanai1309/tweetmetoo/commit/205fcbd436d3f6524c1bba5ac56987afae7a61ac


3:13:00 36. Permissions & Roadmap
---------------------------------

https://github.com/Otinanai1309/tweetmetoo/commit/3db3a8751bd23be1421cd3108a2b9c1e382fce81

And now we have just reached the django and JavaScript limitations. The code has began complicated.
Time to use Rest Framework and React.

3:16:16 37. Install Django Rest Framework
-----------------------------------------


.. code-block:: console
    :emphasize-lines: 1

    $ pip install djangorestframework
    Collecting djangorestframework
    Downloading djangorestframework-3.13.1-py3-none-any.whl (958 kB)
        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 958.3/958.3 KB 2.3 MB/s eta 0:00:00
    Requirement already satisfied: pytz in c:\mydjangorestfullreactapps\twitterlikeapp2\venv\lib\site-packages (from djangorestframework) (2022.1)
    Requirement already satisfied: django>=2.2 in c:\mydjangorestfullreactapps\twitterlikeapp2\venv\lib\site-packages (from djangorestframework) (3.2.13)
    Requirement already satisfied: asgiref<4,>=3.3.2 in c:\mydjangorestfullreactapps\twitterlikeapp2\venv\lib\site-packages (from django>=2.2->djangorestframework) (3.5.0)
    Requirement already satisfied: sqlparse>=0.2.2 in c:\mydjangorestfullreactapps\twitterlikeapp2\venv\lib\site-packages (from 
    django>=2.2->djangorestframework) (0.4.2)
    Installing collected packages: djangorestframework
    Successfully installed djangorestframework-3.13.1

    